syntax = "proto3";

package com.evidentdb;

import "cloudevents.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "EvidentDB.V1";
option go_package = "evidentdb.com/genproto/v1";
option java_package = "com.evidentdb.dto.v1.proto";
option java_multiple_files = true;
option php_namespace = "Com\\EvidentDB\\V1\\Proto";
option ruby_package = "Com::EvidentDB::V1::Proto";
option objc_class_prefix = "EDB";

message DatabaseCreationResult {
  Database database = 1;
}

message DatabaseDeletionInfo {
  string name = 1;
}

message DatabaseDeletionResult {
  Database database = 1;
}

message Database {
  string name = 1;
  string subscription_uri = 2;
  google.protobuf.Timestamp created = 3;
  map<string, uint64> stream_revisions = 4;
}

enum StreamState {
  Any = 0;
  StreamExists = 1;
  NoStream = 2;
  AtRevision = 3;
}

message ProposedEvent {
  string stream = 1;
  StreamState stream_state = 2;
  optional uint64 at_revision = 3;
  io.cloudevents.v1.CloudEvent event = 4;
}

message BatchProposal {
  string database = 1;
  repeated ProposedEvent events = 2;
}

message ProposedBatch {
  string id = 1;
  string database = 2;
  repeated ProposedEvent events = 3;
}

message Event {
  io.cloudevents.v1.CloudEvent event = 2;
  optional string stream = 3;
}

message Batch {
  string id = 1;
  string database = 2;
  repeated Event events = 3;
  google.protobuf.Timestamp timestamp = 4;
  uint64 revision_before = 5;
}

message BatchSummaryEvent {
  int64 id = 2;
  optional string stream = 3;
}

message BatchSummary {
  string id = 1;
  string database = 2;
  repeated BatchSummaryEvent events = 3;
  map<string, int64> stream_revisions = 4;
  google.protobuf.Timestamp timestamp = 5;
}

message BatchTransactionResult {
  Batch batch = 1;
  Database database = 2;
}

// Errors

message InvalidDatabaseNameError {
  string name = 1;
}

message DatabaseNameAlreadyExistsError {
  string name = 1;
}

message DatabaseNotFoundError {
  string name = 1;
}

message NoEventsProvidedError {}

message InvalidStreamName {
  string stream_name = 1;
}

message InvalidEventType {
  string event_type = 1;
}

message InvalidEventSubject {
  string event_subject = 1;
}

message EventInvalidation {
  oneof invalidation {
    InvalidStreamName invalid_stream_name = 1;
    InvalidEventType invalid_event_type = 2;
    InvalidEventSubject invalid_event_subject = 3;
  }
}

message InvalidEvent {
  ProposedEvent event = 1;
  repeated EventInvalidation invalidations = 2;
}

message InvalidEventsError {
  repeated InvalidEvent invalid_events = 1;
}

message DuplicateBatchError {
  ProposedBatch batch = 1;
}

message StreamStateConflict {
  ProposedEvent event = 1;
  StreamState stream_state = 2;
  optional int64 at_revision = 3;
}

message StreamStateConflictsError {
  repeated StreamStateConflict conflicts = 1;
}

message InternalServerError {
  string message = 1;
}

message DatabaseTopicCreationError {
  string database = 1;
  string topic = 2;
}

message DatabaseTopicDeletionError {
  string database = 1;
  string topic = 2;
}

message EventNotFoundError {
  string database = 1;
  int64 event_id = 2;
}
