syntax = "proto3";

package com.evidentdb;

import "domain.proto";
import "cloudevents.proto";

option csharp_namespace = "EvidentDB.V1";
option go_package = "evidentdb.com/genproto/v1";
option java_package = "com.evidentdb.service.v1";
option java_multiple_files = true;
option java_outer_classname = "EvidentDbService";
option php_namespace = "Com\\EvidentDB\\V1\\Proto";
option ruby_package = "Com::EvidentDB::V1::Proto";
option objc_class_prefix = "EDB";

service EvidentDb {
  // Command
  rpc createDatabase(CreateDatabaseRequest) returns (CreateDatabaseReply) {}
  rpc deleteDatabase(DatabaseDeletionInfo)  returns (DeleteDatabaseReply) {}
  rpc transactBatch(BatchProposal)          returns (TransactBatchReply)  {}

  // Query
  rpc catalog(CatalogRequest) returns (stream CatalogReply) {}
  rpc connect(DatabaseRequest) returns (stream DatabaseReply) {}
  rpc latestDatabase(DatabaseRequest) returns (DatabaseReply) {}
  rpc databaseAtRevision(DatabaseAtRevisionRequest) returns (DatabaseReply) {}
  rpc databaseLog(DatabaseLogRequest) returns (stream DatabaseLogReply) {}
  rpc stream(StreamRequest) returns (stream StreamEntryReply) {}
  rpc subjectStream(SubjectStreamRequest) returns (stream StreamEntryReply) {}
  rpc events(stream EventRequest) returns (stream EventReply) {}
}

message CreateDatabaseRequest {
  string name = 1;
}

message CreateDatabaseReply {
  oneof result {
    DatabaseCreationResult database_creation = 1;
    InvalidDatabaseNameError invalid_database_name_error = 2;
    DatabaseNameAlreadyExistsError database_name_already_exists_error = 3;
    DatabaseTopicCreationError database_topic_creation_error = 4;
    InternalServerError internal_server_error = 5;
  }
}

message DeleteDatabaseReply {
  oneof result {
    DatabaseDeletionResult database_deletion = 1;
    InvalidDatabaseNameError invalid_database_name_error = 2;
    DatabaseNotFoundError database_not_found_error = 3;
    DatabaseTopicDeletionError database_topic_deletion_error = 4;
    InternalServerError internal_server_error = 5;
  }
}

message TransactBatchReply {
  oneof result {
    BatchTransactionResult batch_transaction = 1;
    InvalidDatabaseNameError invalid_database_name_error = 2;
    DatabaseNotFoundError database_not_found_error = 3;
    NoEventsProvidedError no_events_provided_error = 4;
    InvalidEventsError invalid_events_error = 5;
    DuplicateBatchError duplicate_batch_error = 6;
    StreamStateConflictsError stream_state_conflict_error = 7;
    InternalServerError internal_server_error = 8;
  }
}

message CatalogRequest {}
message CatalogReply {
  Database database = 1;
}

message DatabaseRequest {
  string name = 1;
}
message DatabaseAtRevisionRequest {
  string name = 1;
  uint64 revision = 2;
}
message DatabaseReply {
  oneof result {
    Database database = 1;
    DatabaseNotFoundError not_found = 2;
  }
}

message DatabaseLogRequest {
  string database = 1;
  uint64 database_revision = 2;
}
message DatabaseLogReply {
  oneof result {
    BatchSummary batch = 1;
    DatabaseNotFoundError database_not_found = 2;
  }
}

message StreamRequest {
  string database = 1;
  uint64 database_revision = 2;
  string stream = 3;
}

message SubjectStreamRequest {
  string database = 1;
  uint64 database_revision = 2;
  string stream = 3;
  string subject = 4;
}

message StreamEntryReply {
  oneof result {
    uint64 event_id = 1;
    // TODO: change this to QueryError enum
    DatabaseNotFoundError database_not_found = 2;
  }
}

message EventRequest {
  string database = 1;
  uint64 event_id = 2;
}

message EventReply {
  oneof result {
    io.cloudevents.v1.CloudEvent event = 1;
    EventNotFoundError event_not_found = 2;
  }
}
