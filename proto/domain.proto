syntax = "proto3";

package com.evidentdb;

import "spec.proto";

option csharp_namespace = "EvidentDB.V1";
option go_package = "evidentdb.com/genproto/v1";
option java_package = "com.evidentdb.dto.v1.proto";
option java_multiple_files = true;
option php_namespace = "Com\\EvidentDB\\V1\\Proto";
option ruby_package = "Com::EvidentDB::V1::Proto";
option objc_class_prefix = "EDB";

message DatabaseCreationInfo {
  string name = 1;
}

message Database {
  string id = 1;
  string name = 2;
}

message DatabaseCreatedInfo {
  Database database = 1;
}

message DatabaseRenameInfo {
  string oldName = 1;
  string newName = 2;
}

message DatabaseDeletionInfo {
  string name = 1;
}

enum StreamState {
  Any = 0;
  StreamExists = 1;
  NoStream = 2;
  AtRevision = 3;
}

message ProposedEvent {
  string stream = 1;
  StreamState streamState = 2;
  optional int64 at_revision = 3;
  io.cloudevents.v1.CloudEvent event = 4;
}

message BatchProposal {
  string databaseName = 2;
  repeated ProposedEvent events = 3;
}

message ProposedBatch {
  string id = 1;
  string databaseId = 2;
  repeated ProposedEvent events = 3;
}

message Batch {
  string id = 1;
  string databaseId = 2;
  repeated io.cloudevents.v1.CloudEvent events = 3;
}

// Errors

message InvalidDatabaseNameError {
  string name = 1;
}

message DatabaseNameAlreadyExistsError {
  string name = 1;
}

message DatabaseNotFoundError {
  string name = 1;
}

message NoEventsProvidedError {}

message InvalidStreamName {
  string streamName = 1;
}

message InvalidEventType {
  string eventType = 1;
}

message InvalidEventAttribute {
  string attributeKey = 1;
}

message EventInvalidation {
  oneof invalidation {
    InvalidStreamName invalidStreamName = 1;
    InvalidEventType invalidEventType = 2;
    InvalidEventAttribute invalidEventAttribute = 3;
  }
}

message InvalidEvent {
  ProposedEvent event = 1;
  repeated EventInvalidation invalidations = 2;
}

message InvalidEventsError {
  repeated InvalidEvent invalidEvents = 1;
}

message StreamStateConflict {
  ProposedEvent event = 1;
  StreamState streamState = 2;
  optional int64 at_revision = 3;
}

message StreamStateConflictsError {
  repeated StreamStateConflict conflicts = 1;
}

message InternalServerError {
  string message = 1;
}