syntax = "proto3";

package com.evidentdb;

import "domain.proto";
import "cloudevents.proto";

option csharp_namespace = "EvidentDB.V1.Proto.Service";
option go_package = "evidentdb.com/v1/genproto/service";
option java_package = "com.evidentdb.v1.proto.service";
option java_multiple_files = true;
option java_outer_classname = "EvidentDbService";
option php_namespace = "Com\\EvidentDB\\V1\\Proto\\Service";
option ruby_package = "Com::EvidentDB::V1::Proto::Service";
option objc_class_prefix = "EDB";

service EvidentDb {
  //// Command
  // Core
  rpc createDatabase(CreateDatabaseRequest) returns (CreateDatabaseReply) {}
  rpc transactBatch(TransactBatchRequest)   returns (TransactBatchReply)  {}
  rpc deleteDatabase(DeleteDatabaseRequest) returns (DeleteDatabaseReply) {}

  // Read Model
  rpc publishReadModel(PublishReadModelRequest) returns (PublishReadModelReply) {}
  rpc activateReadModel(ActivateReadModelRequest) returns (ActivateReadModelReply) {}
  rpc deactivateReadModel(DeactivateReadModelRequest) returns (DeactivateReadModelReply) {}
  rpc deleteReadModel(DeleteReadModelRequest) returns (DeleteReadModelReply) {}

  //// Query

  // Core
  rpc fetchCatalog(CatalogRequest) returns (stream CatalogReply) {}
  rpc fetchLatestDatabase(LatestDatabaseRequest) returns (DatabaseReply) {}
  rpc awaitDatabase(AwaitDatabaseRequest) returns (DatabaseReply) {}
  rpc subscribeDatabaseUpdates(DatabaseUpdatesSubscriptionRequest) returns (stream DatabaseReply) {}
  rpc scanDatabaseLog(LogScanRequest) returns (stream DatabaseLogReply) {}
  rpc queryEventIndex(EventIndexRequest) returns (stream EventIndexReply) {}
  rpc fetchEventsByRevisions(EventsByRevisionsRequest) returns (stream EventReply) {}

  // Read Model
  rpc listReadModels(ListReadModelsRequest) returns (stream ListReadModelsReply) {}
  rpc fetchReadModelAtRevision(FetchReadModelRequest) returns (ReadModelReply) {}
  rpc subscribeReadModelUpdates(ReadModelSubscriptionRequest) returns (stream ReadModelReply) {}
}

//// Command API

// Core

message CreateDatabaseRequest {
  string database_name = 1;
}

message CreateDatabaseReply {
  Database database = 1;
}

message TransactBatchRequest {
  string database_name = 1;
  repeated io.cloudevents.v1.CloudEvent events = 2;
  repeated BatchConstraint constraints = 3;
}

message TransactBatchReply {
  Batch batch = 1;
}

message DeleteDatabaseRequest {
  string database_name = 1;
}

message DeleteDatabaseReply {
  Database database = 1;
}

// Read Model Maintenance
enum ReadModelState {
  INACTIVE = 0;
  ACTIVE = 1;
}

message PublishReadModelRequest {
  string database_name = 1;
  string read_model_name = 2;
  bytes evolve_function_wasm = 3;
  string evolve_function_version_ref = 4; // Git URI/SHA or build URI/version
}
message PublishReadModelReply {
  string database_name = 1;
  string read_model_name = 2;
  uint64 read_model_version = 3;
  string evolve_function_version_ref = 4; // Git URI/SHA or build URI/version
  ReadModelState state = 5;
}

message ActivateReadModelRequest {
  string database_name = 1;
  string read_model_name = 2;
  uint64 read_model_version = 3;
}
message ActivateReadModelReply {
  string database_name = 1;
  string read_model_name = 2;
  uint64 read_model_version = 3;
  ReadModelState state = 4;
  uint64 latest_revision = 5;
}

message DeactivateReadModelRequest {
  string database_name = 1;
  string read_model_name = 2;
  uint64 read_model_version = 3;
}
message DeactivateReadModelReply {
  string database_name = 1;
  string read_model_name = 2;
  uint64 read_model_version = 3;
  ReadModelState state = 4;
}

message DeleteReadModelRequest {
  string database_name = 1;
  string read_model_name = 2;
}
message DeleteReadModelReply {
  string database_name = 1;
  string read_model_name = 2;
  // list of versions that were deleted?
}

//// Query API

message CatalogRequest {}
message CatalogReply {
  string database_name = 1;
}

message LatestDatabaseRequest {
  string database_name = 1;
}
message AwaitDatabaseRequest {
  string database_name = 1;
  uint64 at_least_revision = 2;
}
message DatabaseUpdatesSubscriptionRequest {
  string database_name = 1;
}
message DatabaseReply {
  Database database = 1;
}

message LogScanRequest {
  string database_name = 1;
  // Fuzzy match, result will start with batch that includes this revision
  uint64 start_at_revision = 2;
  bool include_event_detail = 3;
}
message DatabaseLogReply {
  oneof batch {
    BatchSummary summary = 1;
    Batch detail = 2;
  }
}

message EventIndexRequest {
  message StreamQuery {
    string stream = 1;
  }
  message SubjectStreamQuery {
    string stream = 1;
    string subject = 2;
  }
  message SubjectQuery {
    string subject = 1;
  }
  message EventTypeQuery {
    string event_type = 1;
  }
  message EventByIdQuery {
    string stream = 1;
    string event_id = 2;
  }

  string database_name = 1;
  uint64 revision = 2;
  bool include_event_detail = 3;
  oneof query {
    StreamQuery stream = 4;
    SubjectStreamQuery subject_stream = 5;
    SubjectQuery subject = 6;
    EventTypeQuery event_type = 7;
    EventByIdQuery event_by_id = 8;
  }
}
message EventIndexReply {
  oneof event {
    uint64 revision = 1;
    io.cloudevents.v1.CloudEvent detail = 2;
  }
}

message EventsByRevisionsRequest {
  string database_name = 1;
  repeated uint64 event_revisions = 2;
}
message EventReply {
  io.cloudevents.v1.CloudEvent event = 1;
}

// Read Model Queries
message ListReadModelsRequest {
  string database_name = 1;
}
message ListReadModelsReply {
  string database_name = 1;
  string read_model_name = 2;
  uint64 read_model_version = 3;
  ReadModelState state = 4;
  uint64 latest_revision = 5;
}

message FetchReadModelRequest {
  string database_name = 1;
  uint64 revision = 2;
  string read_model_name = 3;
  uint64 read_model_version = 4;
}
message ReadModelSubscriptionRequest {
  string database_name = 1;
  string read_model_name = 3;
  uint64 read_model_version = 4;
}
// Cache-able w/ ETag & Cache-Control on
// database_name + revision + read_model_name + read_model_version
message ReadModelReply {
  string database_name = 1;
  uint64 revision = 2;
  string read_model_name = 3;
  uint64 read_model_version = 4;
  oneof read_model {
    ReadModelData data = 5;
    ReadModelReference reference = 6;
  }

  message ReadModelData {
    bytes data = 1;
    string datacontenttype = 2; // RFC 2046
    string dataschema = 3; // URI
  }

  message ReadModelReference {
    string uri = 1; // URI; destination responsible for content type and schema
  }
}